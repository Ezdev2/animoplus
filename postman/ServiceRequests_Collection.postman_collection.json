{
	"info": {
		"_postman_id": "service-requests-collection-uuid",
		"name": "Service Requests Collection",
		"description": "Collection for testing Service Requests API endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "List Service Requests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success property\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Response has data array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Response has pagination info\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('pagination');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/service-requests?per_page=10&status=pending",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"service-requests"
					],
					"query": [
						{
							"key": "per_page",
							"value": "10"
						},
						{
							"key": "status",
							"value": "pending"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Service Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has created service request data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('id');",
							"    pm.expect(jsonData.data).to.have.property('requested_name');",
							"    pm.expect(jsonData.data.status).to.equal('pending');",
							"    ",
							"    // Store service request ID for other tests",
							"    pm.environment.set('service_request_id', jsonData.data.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requested_name\": \"Consultation Cardiologie Postman\",\n    \"description\": \"Service de consultation spécialisée en cardiologie vétérinaire pour diagnostics avancés avec échographie cardiaque\",\n    \"suggested_price\": 85.50,\n    \"suggested_duration\": 60\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/service-requests",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"service-requests"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Service Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has service request data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('id');",
							"    pm.expect(jsonData.data).to.have.property('user');",
							"    pm.expect(jsonData.data).to.have.property('status');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/service-requests/{{service_request_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"service-requests",
						"{{service_request_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Service Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Service request was updated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.requested_name).to.include('Updated');",
							"    pm.expect(jsonData.data.suggested_price).to.equal(95.00);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requested_name\": \"Consultation Cardiologie Updated\",\n    \"description\": \"Service de consultation spécialisée en cardiologie vétérinaire avec échographie cardiaque et doppler\",\n    \"suggested_price\": 95.00,\n    \"suggested_duration\": 75\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/service-requests/{{service_request_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"service-requests",
						"{{service_request_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Filter by Status - Pending",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"All requests are pending\", function () {",
							"    var jsonData = pm.response.json();",
							"    if (jsonData.data.length > 0) {",
							"        jsonData.data.forEach(function(request) {",
							"            pm.expect(request.status).to.equal('pending');",
							"        });",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/service-requests?status=pending&sort_by=created_at&sort_order=desc",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"service-requests"
					],
					"query": [
						{
							"key": "status",
							"value": "pending"
						},
						{
							"key": "sort_by",
							"value": "created_at"
						},
						{
							"key": "sort_order",
							"value": "desc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Approve Service Request (Admin)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Service request approved\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.be.true;",
							"    pm.expect(jsonData.data.status).to.equal('approved');",
							"    pm.expect(jsonData.data.reviewed_at).to.not.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{admin_jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"admin_notes\": \"Service approuvé pour mise en place dans le système. Sera disponible dans la catégorie consultations spécialisées.\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/service-requests/{{service_request_id}}/approve",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"service-requests",
						"{{service_request_id}}",
						"approve"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Service Request for Rejection",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Store request ID for rejection\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.environment.set('service_request_reject_id', jsonData.data.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requested_name\": \"Service Déjà Existant\",\n    \"description\": \"Ce service existe déjà dans le système\",\n    \"suggested_price\": 50.00,\n    \"suggested_duration\": 30\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/service-requests",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"service-requests"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reject Service Request (Admin)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Service request rejected\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.be.true;",
							"    pm.expect(jsonData.data.status).to.equal('rejected');",
							"    pm.expect(jsonData.data.admin_notes).to.not.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{admin_jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"admin_notes\": \"Ce service existe déjà dans notre catalogue sous la catégorie consultations générales. Merci de vérifier les services existants avant de faire une nouvelle demande.\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/service-requests/{{service_request_reject_id}}/reject",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"service-requests",
						"{{service_request_reject_id}}",
						"reject"
					]
				}
			},
			"response": []
		},
		{
			"name": "Filter by Status - Approved",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"All requests are approved\", function () {",
							"    var jsonData = pm.response.json();",
							"    if (jsonData.data.length > 0) {",
							"        jsonData.data.forEach(function(request) {",
							"            pm.expect(request.status).to.equal('approved');",
							"        });",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{admin_jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/service-requests?status=approved",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"service-requests"
					],
					"query": [
						{
							"key": "status",
							"value": "approved"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Service Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 400\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
							"});",
							"",
							"if (pm.response.code === 400) {",
							"    pm.test(\"Cannot delete processed request\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData.message).to.include('traitée');",
							"    });",
							"} else {",
							"    pm.test(\"Service request deleted successfully\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData.success).to.be.true;",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/service-requests/{{service_request_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"service-requests",
						"{{service_request_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validation Error Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Response has validation errors\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('errors');",
							"    pm.expect(jsonData.errors).to.have.property('requested_name');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requested_name\": \"\",\n    \"suggested_price\": -10,\n    \"suggested_duration\": 0\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/service-requests",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"service-requests"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unauthorized Access Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Response indicates unauthorized\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include('Unauthenticated');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/service-requests",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"service-requests"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://localhost:8000');",
					"}",
					"",
					"if (!pm.environment.get('jwt_token')) {",
					"    console.log('Warning: JWT token not set. Please authenticate first.');",
					"}",
					"",
					"if (!pm.environment.get('admin_jwt_token')) {",
					"    console.log('Warning: Admin JWT token not set. Admin operations will fail.');",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
}
