{
	"info": {
		"_postman_id": "specialites-api-collection",
		"name": "Specialites API Collection",
		"description": "Collection for testing Specialites (Veterinary Specialties) CRUD operations in AnimoPlus API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get All Specialites",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});", 
							"",
							"pm.test(\"Response has success property\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Response has data property\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"});",
							"",
							"// Store first specialite ID for other tests",
							"if (pm.response.json().data.data && pm.response.json().data.data.length > 0) {",
							"    pm.environment.set(\"specialite_id\", pm.response.json().data.data[0].id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/specialites?per_page=15&search=&is_active=true",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"specialites"
					],
					"query": [
						{
							"key": "per_page",
							"value": "15",
							"description": "Number of items per page"
						},
						{
							"key": "search",
							"value": "",
							"description": "Search term"
						},
						{
							"key": "is_active",
							"value": "true",
							"description": "Filter active specialties only"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Specialite",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has success property\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Response has data with created specialite\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('id');",
							"    pm.expect(jsonData.data).to.have.property('name');",
							"});",
							"",
							"// Store created specialite ID",
							"if (pm.response.json().data && pm.response.json().data.id) {",
							"    pm.environment.set(\"new_specialite_id\", pm.response.json().data.id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Médecine comportementale\",\n    \"description\": \"Spécialité dédiée au diagnostic et traitement des troubles comportementaux chez les animaux domestiques et sauvages.\",\n    \"is_active\": true\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/specialites",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"specialites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specific Specialite",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success property\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Response has specialite data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('id');",
							"    pm.expect(jsonData.data).to.have.property('name');",
							"    pm.expect(jsonData.data).to.have.property('is_active');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/specialites/{{specialite_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"specialites",
						"{{specialite_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Specialite",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success property\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Response has updated data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('id');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Médecine comportementale - Mise à jour\",\n    \"description\": \"Spécialité mise à jour dédiée au diagnostic et traitement des troubles comportementaux chez les animaux domestiques et sauvages. Inclut thérapie comportementale et rééducation.\",\n    \"is_active\": true\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/specialites/{{new_specialite_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"specialites",
						"{{new_specialite_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Specialites",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success property\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Search results contain search term\", function () {",
							"    var jsonData = pm.response.json();",
							"    if (jsonData.data.data && jsonData.data.data.length > 0) {",
							"        var firstResult = jsonData.data.data[0];",
							"        var searchTerm = \"chirurgie\";",
							"        var containsSearchTerm = firstResult.name.toLowerCase().includes(searchTerm) || ",
							"                                (firstResult.description && firstResult.description.toLowerCase().includes(searchTerm));",
							"        pm.expect(containsSearchTerm).to.be.true;",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/specialites?search=chirurgie&per_page=10",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"specialites"
					],
					"query": [
						{
							"key": "search",
							"value": "chirurgie",
							"description": "Search for specialties containing 'chirurgie'"
						},
						{
							"key": "per_page",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Veterinarians by Specialty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response has success true', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.be.true;",
							"});",
							"",
							"pm.test('Response has specialty and veterinarians', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.have.property('specialty');",
							"    pm.expect(jsonData.data).to.have.property('veterinarians');",
							"    pm.expect(jsonData.data).to.have.property('pagination');",
							"});",
							"",
							"pm.test('Specialty has required fields', function () {",
							"    const jsonData = pm.response.json();",
							"    const specialty = jsonData.data.specialty;",
							"    pm.expect(specialty).to.have.property('id');",
							"    pm.expect(specialty).to.have.property('name');",
							"    pm.expect(specialty).to.have.property('description');",
							"});",
							"",
							"pm.test('Veterinarians array is valid', function () {",
							"    const jsonData = pm.response.json();",
							"    const veterinarians = jsonData.data.veterinarians;",
							"    pm.expect(veterinarians).to.be.an('array');",
							"    ",
							"    if (veterinarians.length > 0) {",
							"        const vet = veterinarians[0];",
							"        pm.expect(vet).to.have.property('id');",
							"        pm.expect(vet).to.have.property('name');",
							"        pm.expect(vet).to.have.property('email');",
							"        pm.expect(vet).to.have.property('pivot');",
							"        ",
							"        // Check pivot data",
							"        pm.expect(vet.pivot).to.have.property('is_active');",
							"        pm.expect(vet.pivot).to.have.property('is_primary');",
							"    }",
							"});",
							"",
							"pm.test('Pagination has required fields', function () {",
							"    const jsonData = pm.response.json();",
							"    const pagination = jsonData.data.pagination;",
							"    pm.expect(pagination).to.have.property('current_page');",
							"    pm.expect(pagination).to.have.property('total');",
							"    pm.expect(pagination).to.have.property('per_page');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/specialites/{{specialite_id}}/veterinarians?active_only=true&per_page=15",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"specialites",
						"{{specialite_id}}",
						"veterinarians"
					],
					"query": [
						{
							"key": "active_only",
							"value": "true",
							"description": "Filter only active veterinarians"
						},
						{
							"key": "per_page",
							"value": "15",
							"description": "Number of items per page"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Specialite",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success property\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Response has deletion message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData.message).to.include('supprimée');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/specialites/{{new_specialite_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"specialites",
						"{{new_specialite_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Restore Deleted Specialite",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success property\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Response has restored data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('id');",
							"    pm.expect(jsonData.data.deleted_at).to.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/specialites/{{new_specialite_id}}/restore",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"specialites",
						"{{new_specialite_id}}",
						"restore"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validation Test - Create Invalid Specialite",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Response has validation errors\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.false;",
							"    pm.expect(jsonData).to.have.property('errors');",
							"});",
							"",
							"pm.test(\"Name validation error present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors).to.have.property('name');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"description\": \"Test sans nom - devrait échouer\",\n    \"is_active\": true\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/specialites",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"specialites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validation Test - Duplicate Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Response has validation errors\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.false;",
							"    pm.expect(jsonData).to.have.property('errors');",
							"});",
							"",
							"pm.test(\"Unique validation error present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors).to.have.property('name');",
							"    pm.expect(jsonData.errors.name[0]).to.include('existe déjà');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Chirurgie\",\n    \"description\": \"Tentative de création d'une spécialité avec un nom déjà existant\",\n    \"is_active\": true\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/specialites",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"specialites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authentication Test - No Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Response indicates authentication required\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.false;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/specialites",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"specialites"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
}
