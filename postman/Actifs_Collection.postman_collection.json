{
	"info": {
		"_postman_id": "actifs-api-collection",
		"name": "Actifs API Collection",
		"description": "Complete CRUD operations for Actifs (Inventory Assets) with authentication, validation, filtering, statistics, and restore functionality",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"exec": [
					"// Auto-set Authorization header if jwt_token exists",
					"if (pm.environment.get('jwt_token')) {",
					"    pm.request.headers.add({",
					"        key: 'Authorization',",
					"        value: 'Bearer ' + pm.environment.get('jwt_token')",
					"    });",
					"}"
				],
				"type": "text/javascript"
			}
		}
	],
	"item": [
		{
			"name": "Actifs",
			"item": [
				{
					"name": "Get All Actifs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success true', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response has data array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test('Response has pagination info', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination).to.be.an('object');",
									"    pm.expect(jsonData.pagination).to.have.property('current_page');",
									"    pm.expect(jsonData.pagination).to.have.property('total');",
									"});",
									"",
									"pm.test('Response has summary info', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.summary).to.be.an('object');",
									"    pm.expect(jsonData.summary).to.have.property('total_actifs');",
									"    pm.expect(jsonData.summary).to.have.property('active_actifs');",
									"});",
									"",
									"// Store first actif ID for other tests",
									"const jsonData = pm.response.json();",
									"if (jsonData.data && jsonData.data.length > 0) {",
									"    pm.environment.set('actif_id', jsonData.data[0].id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/actifs?per_page=10&page=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"actifs"
							],
							"query": [
								{
									"key": "per_page",
									"value": "10"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					}
				},
				{
					"name": "Get Actifs with Filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success true', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/actifs?type=medicament&active_only=true&with_stocks=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"actifs"
							],
							"query": [
								{
									"key": "type",
									"value": "medicament"
								},
								{
									"key": "active_only",
									"value": "true"
								},
								{
									"key": "with_stocks",
									"value": "true"
								}
							]
						}
					}
				},
				{
					"name": "Search Actifs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success true', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/actifs?search=amoxicilline",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"actifs"
							],
							"query": [
								{
									"key": "search",
									"value": "amoxicilline"
								}
							]
						}
					}
				},
				{
					"name": "Create Actif",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has success true', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response has actif data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('object');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('nom');",
									"    pm.expect(jsonData.data).to.have.property('type');",
									"});",
									"",
									"// Store created actif ID",
									"const jsonData = pm.response.json();",
									"if (jsonData.data && jsonData.data.id) {",
									"    pm.environment.set('created_actif_id', jsonData.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nom\": \"Test Médicament API\",\n    \"description\": \"Médicament de test créé via API Postman\",\n    \"type\": \"medicament\",\n    \"unite_mesure\": \"boite\",\n    \"prix_unitaire_defaut\": 25.75,\n    \"seuil_alerte\": 5,\n    \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/actifs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"actifs"
							]
						}
					}
				},
				{
					"name": "Get Specific Actif",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success true', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response has actif data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('object');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/actifs/{{created_actif_id}}?with_stocks=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"actifs",
								"{{created_actif_id}}"
							],
							"query": [
								{
									"key": "with_stocks",
									"value": "true"
								}
							]
						}
					}
				},
				{
					"name": "Update Actif",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success true', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Actif was updated', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.prix_unitaire_defaut).to.eql('30.00');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nom\": \"Test Médicament API - Modifié\",\n    \"description\": \"Médicament de test modifié via API Postman\",\n    \"type\": \"medicament\",\n    \"unite_mesure\": \"boite\",\n    \"prix_unitaire_defaut\": 30.00,\n    \"seuil_alerte\": 8,\n    \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/actifs/{{created_actif_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"actifs",
								"{{created_actif_id}}"
							]
						}
					}
				},
				{
					"name": "Get Actif Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success true', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response has statistics data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('object');",
									"    pm.expect(jsonData.data).to.have.property('total_actifs');",
									"    pm.expect(jsonData.data).to.have.property('by_type');",
									"    pm.expect(jsonData.data).to.have.property('low_stock_count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/actifs/statistics",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"actifs",
								"statistics"
							]
						}
					}
				},
				{
					"name": "Get Low Stock Actifs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success true', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response has low stock data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData).to.have.property('count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/actifs/low-stock",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"actifs",
								"low-stock"
							]
						}
					}
				},
				{
					"name": "Delete Actif",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success true', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Success message is correct', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('supprimé');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/actifs/{{created_actif_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"actifs",
								"{{created_actif_id}}"
							]
						}
					}
				},
				{
					"name": "Restore Actif",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success true', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Success message is correct', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('restauré');",
									"});",
									"",
									"pm.test('Response has actif data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('object');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/actifs/{{created_actif_id}}/restore",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"actifs",
								"{{created_actif_id}}",
								"restore"
							]
						}
					}
				}
			]
		},
		{
			"name": "Validation Tests",
			"item": [
				{
					"name": "Create Actif - Missing Required Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 422', function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test('Response has validation errors', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.errors).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Test without required fields\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/actifs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"actifs"
							]
						}
					}
				},
				{
					"name": "Create Actif - Invalid Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 422', function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test('Response has validation errors', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.errors).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nom\": \"Test Actif\",\n    \"type\": \"invalid_type\",\n    \"unite_mesure\": \"boite\",\n    \"prix_unitaire_defaut\": 10.00,\n    \"seuil_alerte\": 5\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/actifs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"actifs"
							]
						}
					}
				},
				{
					"name": "Create Actif - Invalid Unite Mesure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 422', function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test('Response has validation errors', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.errors).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nom\": \"Test Actif\",\n    \"type\": \"medicament\",\n    \"unite_mesure\": \"invalid_unit\",\n    \"prix_unitaire_defaut\": 10.00,\n    \"seuil_alerte\": 5\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/actifs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"actifs"
							]
						}
					}
				},
				{
					"name": "Get Actif - Invalid UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 422', function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test('Response has error message', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include('invalide');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/actifs/invalid-uuid",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"actifs",
								"invalid-uuid"
							]
						}
					}
				},
				{
					"name": "Get Actif - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('Response has error message', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include('non trouvé');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/actifs/550e8400-e29b-41d4-a716-446655440000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"actifs",
								"550e8400-e29b-41d4-a716-446655440000"
							]
						}
					}
				},
				{
					"name": "Create Actif - Duplicate Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 422', function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test('Response has validation errors', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.errors).to.be.an('object');",
									"    pm.expect(jsonData.errors.nom).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nom\": \"Amoxicilline 250mg\",\n    \"description\": \"Duplicate name test\",\n    \"type\": \"medicament\",\n    \"unite_mesure\": \"boite\",\n    \"prix_unitaire_defaut\": 15.50,\n    \"seuil_alerte\": 10\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/actifs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"actifs"
							]
						}
					}
				}
			]
		}
	]
}
