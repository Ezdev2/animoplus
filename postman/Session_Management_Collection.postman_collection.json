{
	"info": {
		"_postman_id": "session-management-collection-id",
		"name": "AnimoPlus - Session Management",
		"description": "Complete session management endpoints for AnimoPlus API - JWT tokens, active sessions, and device management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication & Tokens",
			"item": [
				{
					"name": "Login (Generate Tokens)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.access_token) {",
									"        pm.environment.set('access_token', response.access_token);",
									"        console.log('âœ… Access token saved');",
									"    }",
									"    if (response.refresh_token) {",
									"        pm.environment.set('refresh_token', response.refresh_token);",
									"        console.log('âœ… Refresh token saved');",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{user_email}}\",\n  \"password\": \"{{user_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						}
					}
				},
				{
					"name": "Refresh Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.access_token) {",
									"        pm.environment.set('access_token', response.access_token);",
									"        console.log('âœ… New access token saved');",
									"    }",
									"    if (response.refresh_token) {",
									"        pm.environment.set('refresh_token', response.refresh_token);",
									"        console.log('âœ… New refresh token saved');",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/refresh",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "refresh"]
						}
					}
				}
			]
		},
		{
			"name": "Session Management",
			"item": [
				{
					"name": "Get Active Sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.sessions && response.sessions.length > 0) {",
									"        const firstSession = response.sessions[0];",
									"        pm.environment.set('session_id', firstSession.id);",
									"        console.log('âœ… Session ID saved for testing:', firstSession.id);",
									"        console.log('ðŸ“± Active sessions:', response.sessions.length);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/user/sessions",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "sessions"]
						}
					}
				},
				{
					"name": "Revoke Specific Session",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/user/sessions/{{session_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "sessions", "{{session_id}}"],
							"description": "Session ID is now a UUID instead of integer"
						}
					}
				},
				{
					"name": "Logout Current Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('âœ… Current session logged out');",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/logout",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "logout"]
						}
					}
				},
				{
					"name": "Logout All Sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.unset('access_token');",
									"    pm.environment.unset('refresh_token');",
									"    pm.environment.unset('session_id');",
									"    console.log('âœ… All sessions revoked - Environment cleared');",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/logout-all",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "logout-all"]
						}
					}
				}
			]
		},
		{
			"name": "Session Testing Scenarios",
			"item": [
				{
					"name": "Test Token Expiration",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer expired_token_here"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "profile"]
						}
					}
				},
				{
					"name": "Test Invalid Refresh Token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refresh_token\": \"invalid_refresh_token\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/refresh",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "refresh"]
						}
					}
				},
				{
					"name": "Multiple Device Login Simulation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Simulate different device",
									"pm.request.headers.add({",
									"    key: 'User-Agent',",
									"    value: 'PostmanTest/Mobile-Device-' + Math.random().toString(36).substr(2, 9)",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{user_email}}\",\n  \"password\": \"{{user_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						}
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000"
		}
	]
}
