// Utilitaire pour synchroniser les donn√©es de profil √† travers l'application
import { authChecker } from './authChecker.js'

export const profileSync = {
  
  // Synchroniser toutes les donn√©es de profil apr√®s une mise √† jour
  async syncAllProfileData(updatedUserData) {
    console.log('üîÑ Synchronisation compl√®te des donn√©es de profil...')
    
    try {
      // 1. Mettre √† jour toutes les cl√©s localStorage
      const dataToStore = JSON.stringify(updatedUserData)
      localStorage.setItem('animoplus_user_data', dataToStore)
      localStorage.setItem('user_data', dataToStore)
      localStorage.setItem('animoplus_user', dataToStore)
      
      // 2. Synchroniser avec authChecker
      authChecker.syncUserData()
      
      // 3. Mettre √† jour les stores Pinia
      await this.updatePiniaStores(updatedUserData)
      
      // 4. Invalider les caches TanStack Query
      await this.invalidateQueryCache()
      
      // 5. D√©clencher les √©v√©nements personnalis√©s
      this.dispatchUpdateEvents(updatedUserData)
      
      console.log('‚úÖ Synchronisation compl√®te termin√©e')
      return true
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la synchronisation:', error)
      return false
    }
  },
  
  // Mettre √† jour tous les stores Pinia
  async updatePiniaStores(userData) {
    try {
      // Store utilisateur principal
      const { useUserStore } = await import('@/stores/user.js')
      const userStore = useUserStore()
      
      if (userStore.updateUser) {
        userStore.updateUser(userData)
        console.log('‚úÖ Store user.js mis √† jour')
      }
      
      // Store utilisateurs (si existe)
      try {
        const { useUsersStore } = await import('@/stores/users.js')
        const usersStore = useUsersStore()
        
        if (usersStore.updateCurrentUser) {
          usersStore.updateCurrentUser(userData)
          console.log('‚úÖ Store users.js mis √† jour')
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Store users.js non disponible')
      }
      
      // Store auth Pinia
      try {
        const { useAuthStore } = await import('@/stores/authPinia.js')
        const authStore = useAuthStore()
        
        if (authStore.setUser) {
          authStore.setUser(userData)
          console.log('‚úÖ Store authPinia.js mis √† jour')
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Store authPinia.js non disponible')
      }
      
    } catch (error) {
      console.error('‚ùå Erreur mise √† jour stores Pinia:', error)
    }
  },
  
  // Invalider les caches TanStack Query
  async invalidateQueryCache() {
    try {
      const { useQueryClient } = await import('@tanstack/vue-query')
      const queryClient = useQueryClient()
      
      // Invalider toutes les requ√™tes li√©es aux utilisateurs
      await queryClient.invalidateQueries({ queryKey: ['user'] })
      await queryClient.invalidateQueries({ queryKey: ['users'] })
      await queryClient.invalidateQueries({ queryKey: ['profile'] })
      await queryClient.invalidateQueries({ queryKey: ['auth'] })
      
      console.log('‚úÖ Cache TanStack Query invalid√©')
    } catch (error) {
      console.log('‚ö†Ô∏è TanStack Query non disponible')
    }
  },
  
  // D√©clencher les √©v√©nements de mise √† jour
  dispatchUpdateEvents(userData) {
    // √âv√©nement pour les changements localStorage
    window.dispatchEvent(new CustomEvent('localStorageChange', {
      detail: {
        key: 'animoplus_user_data',
        newValue: userData,
        action: 'profile-updated'
      }
    }))
    
    // √âv√©nement sp√©cifique pour la mise √† jour du profil
    window.dispatchEvent(new CustomEvent('profileUpdated', {
      detail: userData
    }))
    
    console.log('‚úÖ √âv√©nements de mise √† jour d√©clench√©s')
  },
  
  // Forcer le rafra√Æchissement de tous les composants
  forceRefresh() {
    console.log('üîÑ For√ßage du rafra√Æchissement des composants...')
    
    // D√©clencher un √©v√©nement global de rafra√Æchissement
    window.dispatchEvent(new CustomEvent('forceProfileRefresh', {
      detail: { timestamp: Date.now() }
    }))
  }
}

export default profileSync
