import { apiClient } from '@/services/api/config.js'
import { API_ENDPOINTS } from '@/services/api/endpoints.js'

/**
 * Service pour la gestion des animaux perdus/trouv√©s (Coop√©ration)
 */
export const lostAnimalsService = {
  /**
   * R√©cup√©rer la liste des annonces avec filtres
   */
  async getLostAnimals(options = {}) {
    try {
      const params = new URLSearchParams()
      
      // Filtres disponibles
      if (options.type && options.type !== 'all') params.append('type', options.type)
      if (options.animal_type) params.append('animal_type', options.animal_type)
      if (options.search) params.append('search', options.search)
      if (options.latitude) params.append('latitude', options.latitude)
      if (options.longitude) params.append('longitude', options.longitude)
      if (options.radius) params.append('radius', options.radius)
      if (options.status) params.append('status', options.status)
      
      // Pagination
      if (options.page) params.append('page', options.page)
      if (options.per_page) params.append('per_page', options.per_page)
      
      const queryString = params.toString()
      const url = queryString ? `${API_ENDPOINTS.LOST_ANIMALS.LIST}?${queryString}` : API_ENDPOINTS.LOST_ANIMALS.LIST
      
      console.log('üîç R√©cup√©ration des annonces:', url)
      const response = await apiClient.get(url)
      
      console.log('üì¶ R√©ponse API annonces:', response.data)
      
      // La r√©ponse API a cette structure : { success: true, data: { current_page, data: [...], ... } }
      const apiResponse = response.data
      
      return {
        success: true,
        data: apiResponse.data?.data || apiResponse.data || [],
        pagination: {
          current_page: apiResponse.data?.current_page || 1,
          last_page: apiResponse.data?.last_page || 1,
          per_page: apiResponse.data?.per_page || 15,
          total: apiResponse.data?.total || 0,
          from: apiResponse.data?.from || 0,
          to: apiResponse.data?.to || 0
        },
        message: apiResponse.message || 'Annonces r√©cup√©r√©es avec succ√®s'
      }
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration annonces:', error)
      return {
        success: false,
        error: error.response?.data?.message || error.message || 'Erreur lors de la r√©cup√©ration des annonces'
      }
    }
  },

  /**
   * R√©cup√©rer le d√©tail d'une annonce
   */
  async getLostAnimalById(id) {
    try {
      console.log('üîç R√©cup√©ration annonce:', id)
      const response = await apiClient.get(API_ENDPOINTS.LOST_ANIMALS.DETAIL(id))
      
      console.log('üì¶ D√©tail annonce:', response.data)
      
      return {
        success: true,
        data: response.data.data || response.data,
        message: response.data.message || 'Annonce r√©cup√©r√©e avec succ√®s'
      }
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration annonce:', error)
      return {
        success: false,
        error: error.response?.data?.message || error.message || 'Erreur lors de la r√©cup√©ration de l\'annonce'
      }
    }
  },

  /**
   * Cr√©er une nouvelle annonce
   */
  async createLostAnimal(animalData) {
    try {
      console.log('üìù Cr√©ation annonce:', animalData)
      
      // Pr√©parer les donn√©es pour FormData si des photos sont pr√©sentes
      let requestData
      let config = {}
      
      if (animalData.photos && animalData.photos.length > 0) {
        // Upload avec photos
        requestData = new FormData()
        
        // Ajouter tous les champs
        Object.keys(animalData).forEach(key => {
          if (key === 'photos') {
            // Ajouter les photos
            animalData.photos.forEach((photo, index) => {
              requestData.append(`photos[${index}]`, photo)
            })
          } else if (animalData[key] !== null && animalData[key] !== undefined) {
            requestData.append(key, animalData[key])
          }
        })
        
        // Laisser Axios g√©rer automatiquement le Content-Type pour FormData (avec boundary)
        config.headers = {}
      } else {
        // Donn√©es JSON simples
        requestData = animalData
        config.headers = { 'Content-Type': 'application/json' }
      }
      
      console.log('üöÄ Envoi requ√™te POST vers:', API_ENDPOINTS.LOST_ANIMALS.CREATE)
      console.log('üì¶ Donn√©es envoy√©es:', requestData)
      console.log('üìã Config:', config)
      
      const response = await apiClient.post(API_ENDPOINTS.LOST_ANIMALS.CREATE, requestData, config)
      
      console.log('üìä Status de la r√©ponse:', response.status)
      console.log('‚úÖ R√©ponse compl√®te:', response)
      console.log('üìÑ Donn√©es de la r√©ponse:', response.data)
      
      return {
        success: true,
        data: response.data.data,
        message: response.data.message || 'Annonce cr√©√©e avec succ√®s'
      }
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation annonce:', error)
      return {
        success: false,
        error: error.response?.data?.message || error.message || 'Erreur lors de la cr√©ation de l\'annonce'
      }
    }
  },

  /**
   * Modifier une annonce existante
   */
  async updateLostAnimal(id, updateData) {
    try {
      console.log('‚úèÔ∏è Modification annonce:', id, updateData)
      const response = await apiClient.put(API_ENDPOINTS.LOST_ANIMALS.UPDATE(id), updateData)
      
      console.log('‚úÖ Annonce modifi√©e:', response.data)
      
      return {
        success: true,
        data: response.data.data || response.data,
        message: response.data.message || 'Annonce modifi√©e avec succ√®s'
      }
    } catch (error) {
      console.error('‚ùå Erreur modification annonce:', error)
      throw error
    }
  },

  /**
   * Supprimer une annonce
   */
  async deleteLostAnimal(id) {
    try {
      console.log('üóëÔ∏è Suppression annonce:', id)
      const response = await apiClient.delete(API_ENDPOINTS.LOST_ANIMALS.DELETE(id))
      
      console.log('‚úÖ Annonce supprim√©e:', response.data)
      
      return {
        success: true,
        data: response.data.data || response.data,
        message: response.data.message || 'Annonce supprim√©e avec succ√®s'
      }
    } catch (error) {
      console.error('‚ùå Erreur suppression annonce:', error)
      throw error
    }
  },

  /**
   * Marquer une annonce comme r√©solue (animal retrouv√©)
   */
  async resolveLostAnimal(id, resolutionData = {}) {
    try {
      console.log('üéâ R√©solution annonce:', id, resolutionData)
      const response = await apiClient.post(API_ENDPOINTS.LOST_ANIMALS.RESOLVE(id), resolutionData)
      
      console.log('‚úÖ Annonce r√©solue:', response.data)
      
      return {
        success: true,
        data: response.data.data || response.data,
        message: response.data.message || 'Annonce marqu√©e comme r√©solue'
      }
    } catch (error) {
      console.error('‚ùå Erreur r√©solution annonce:', error)
      throw error
    }
  },

  /**
   * Recherche g√©ographique avanc√©e
   */
  async searchByLocation(latitude, longitude, radius = 5, options = {}) {
    try {
      const searchOptions = {
        latitude,
        longitude,
        radius,
        ...options
      }
      
      console.log('üåç Recherche g√©ographique:', searchOptions)
      return await this.getLostAnimals(searchOptions)
    } catch (error) {
      console.error('‚ùå Erreur recherche g√©ographique:', error)
      return {
        success: false,
        error: error.message || 'Erreur lors de la recherche g√©ographique'
      }
    }
  },

  /**
   * Ajouter des photos √† une annonce existante
   */
  async addPhotos(animalId, photos) {
    try {
      console.log('üì∏ Ajout photos:', animalId, photos.length)
      
      const formData = new FormData()
      photos.forEach((photo, index) => {
        formData.append(`photos[${index}]`, photo)
      })
      
      const response = await apiClient.post(
        API_ENDPOINTS.LOST_ANIMALS.ADD_PHOTOS(animalId), 
        formData,
        {
          headers: { 'Content-Type': 'multipart/form-data' }
        }
      )
      
      console.log('‚úÖ Photos ajout√©es:', response.data)
      
      return {
        success: true,
        data: response.data.data || response.data,
        message: response.data.message || 'Photos ajout√©es avec succ√®s'
      }
    } catch (error) {
      console.error('‚ùå Erreur ajout photos:', error)
      throw error
    }
  },

  /**
   * Supprimer une photo
   */
  async deletePhoto(photoId) {
    try {
      console.log('üóëÔ∏è Suppression photo:', photoId)
      const response = await apiClient.delete(API_ENDPOINTS.LOST_ANIMALS.DELETE_PHOTO(photoId))
      
      console.log('‚úÖ Photo supprim√©e:', response.data)
      
      return {
        success: true,
        data: response.data.data || response.data,
        message: response.data.message || 'Photo supprim√©e avec succ√®s'
      }
    } catch (error) {
      console.error('‚ùå Erreur suppression photo:', error)
      throw error
    }
  },

  // === MOD√âRATION (V√©t√©rinaires) ===

  /**
   * R√©cup√©rer les annonces en attente de mod√©ration
   */
  async getPendingAnimals(options = {}) {
    try {
      console.log('‚è≥ R√©cup√©ration annonces en attente')
      
      const params = new URLSearchParams()
      
      // Filtres disponibles
      if (options.type && options.type !== 'all') params.append('type', options.type)
      if (options.animal_type) params.append('animal_type', options.animal_type)
      if (options.search) params.append('search', options.search)
      
      // Pagination
      if (options.page) params.append('page', options.page)
      if (options.per_page) params.append('per_page', options.per_page)
      
      const queryString = params.toString()
      const url = queryString ? `${API_ENDPOINTS.LOST_ANIMALS.PENDING}?${queryString}` : API_ENDPOINTS.LOST_ANIMALS.PENDING
      
      console.log('üîç URL annonces en attente:', url)
      const response = await apiClient.get(url)
      
      console.log('üì¶ R√©ponse API annonces en attente:', response.data)
      
      const apiResponse = response.data
      
      return {
        success: true,
        data: apiResponse.data?.data || apiResponse.data || [],
        pagination: {
          current_page: apiResponse.data?.current_page || 1,
          last_page: apiResponse.data?.last_page || 1,
          per_page: apiResponse.data?.per_page || 15,
          total: apiResponse.data?.total || 0,
          from: apiResponse.data?.from || 0,
          to: apiResponse.data?.to || 0
        },
        filters: apiResponse.filters || { status: 'pending' },
        message: apiResponse.message || 'Annonces en attente r√©cup√©r√©es avec succ√®s'
      }
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration annonces en attente:', error)
      return {
        success: false,
        error: error.response?.data?.message || error.message || 'Erreur lors de la r√©cup√©ration des annonces en attente'
      }
    }
  },

  /**
   * R√©cup√©rer les annonces approuv√©es
   */
  async getApprovedAnimals(options = {}) {
    try {
      console.log('‚úÖ R√©cup√©ration annonces approuv√©es')
      
      const params = new URLSearchParams()
      
      // Filtres disponibles
      if (options.type && options.type !== 'all') params.append('type', options.type)
      if (options.animal_type) params.append('animal_type', options.animal_type)
      if (options.search) params.append('search', options.search)
      
      // Pagination
      if (options.page) params.append('page', options.page)
      if (options.per_page) params.append('per_page', options.per_page)
      
      const queryString = params.toString()
      const url = queryString ? `${API_ENDPOINTS.LOST_ANIMALS.APPROVED}?${queryString}` : API_ENDPOINTS.LOST_ANIMALS.APPROVED
      
      console.log('üîç URL annonces approuv√©es:', url)
      const response = await apiClient.get(url)
      
      console.log('üì¶ R√©ponse API annonces approuv√©es:', response.data)
      
      const apiResponse = response.data
      
      return {
        success: true,
        data: apiResponse.data?.data || apiResponse.data || [],
        pagination: {
          current_page: apiResponse.data?.current_page || 1,
          last_page: apiResponse.data?.last_page || 1,
          per_page: apiResponse.data?.per_page || 15,
          total: apiResponse.data?.total || 0,
          from: apiResponse.data?.from || 0,
          to: apiResponse.data?.to || 0
        },
        filters: apiResponse.filters || { status: 'approved' },
        message: apiResponse.message || 'Annonces approuv√©es r√©cup√©r√©es avec succ√®s'
      }
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration annonces approuv√©es:', error)
      return {
        success: false,
        error: error.response?.data?.message || error.message || 'Erreur lors de la r√©cup√©ration des annonces approuv√©es'
      }
    }
  },

  /**
   * R√©cup√©rer les annonces rejet√©es
   */
  async getRejectedAnimals(options = {}) {
    try {
      console.log('‚ùå R√©cup√©ration annonces rejet√©es')
      
      const params = new URLSearchParams()
      
      // Filtres disponibles
      if (options.type && options.type !== 'all') params.append('type', options.type)
      if (options.animal_type) params.append('animal_type', options.animal_type)
      if (options.search) params.append('search', options.search)
      
      // Pagination
      if (options.page) params.append('page', options.page)
      if (options.per_page) params.append('per_page', options.per_page)
      
      const queryString = params.toString()
      const url = queryString ? `${API_ENDPOINTS.LOST_ANIMALS.REJECTED}?${queryString}` : API_ENDPOINTS.LOST_ANIMALS.REJECTED
      
      console.log('üîç URL annonces rejet√©es:', url)
      const response = await apiClient.get(url)
      
      console.log('üì¶ R√©ponse API annonces rejet√©es:', response.data)
      
      const apiResponse = response.data
      
      return {
        success: true,
        data: apiResponse.data?.data || apiResponse.data || [],
        pagination: {
          current_page: apiResponse.data?.current_page || 1,
          last_page: apiResponse.data?.last_page || 1,
          per_page: apiResponse.data?.per_page || 15,
          total: apiResponse.data?.total || 0,
          from: apiResponse.data?.from || 0,
          to: apiResponse.data?.to || 0
        },
        filters: apiResponse.filters || { status: 'rejected' },
        message: apiResponse.message || 'Annonces rejet√©es r√©cup√©r√©es avec succ√®s'
      }
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration annonces rejet√©es:', error)
      return {
        success: false,
        error: error.response?.data?.message || error.message || 'Erreur lors de la r√©cup√©ration des annonces rejet√©es'
      }
    }
  },

  /**
   * R√©cup√©rer les annonces r√©solues
   */
  async getResolvedAnimals(options = {}) {
    try {
      console.log('üéâ R√©cup√©ration annonces r√©solues')
      
      const params = new URLSearchParams()
      
      // Filtres disponibles
      if (options.type && options.type !== 'all') params.append('type', options.type)
      if (options.animal_type) params.append('animal_type', options.animal_type)
      if (options.search) params.append('search', options.search)
      
      // Pagination
      if (options.page) params.append('page', options.page)
      if (options.per_page) params.append('per_page', options.per_page)
      
      const queryString = params.toString()
      const url = queryString ? `${API_ENDPOINTS.LOST_ANIMALS.RESOLVED}?${queryString}` : API_ENDPOINTS.LOST_ANIMALS.RESOLVED
      
      console.log('üîç URL annonces r√©solues:', url)
      const response = await apiClient.get(url)
      
      console.log('üì¶ R√©ponse API annonces r√©solues:', response.data)
      
      const apiResponse = response.data
      
      return {
        success: true,
        data: apiResponse.data?.data || apiResponse.data || [],
        pagination: {
          current_page: apiResponse.data?.current_page || 1,
          last_page: apiResponse.data?.last_page || 1,
          per_page: apiResponse.data?.per_page || 15,
          total: apiResponse.data?.total || 0,
          from: apiResponse.data?.from || 0,
          to: apiResponse.data?.to || 0
        },
        filters: apiResponse.filters || { status: 'resolved' },
        message: apiResponse.message || 'Annonces r√©solues r√©cup√©r√©es avec succ√®s'
      }
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration annonces r√©solues:', error)
      return {
        success: false,
        error: error.response?.data?.message || error.message || 'Erreur lors de la r√©cup√©ration des annonces r√©solues'
      }
    }
  },

  /**
   * Approuver une annonce (v√©t√©rinaires uniquement)
   */
  async approveLostAnimal(id, approvalData = {}) {
    try {
      console.log('‚úÖ Approbation annonce:', id, approvalData)
      const response = await apiClient.post(API_ENDPOINTS.LOST_ANIMALS.APPROVE(id), approvalData)
      
      console.log('‚úÖ Annonce approuv√©e:', response.data)
      
      return {
        success: true,
        data: response.data.data || response.data,
        message: response.data.message || 'Annonce approuv√©e avec succ√®s'
      }
    } catch (error) {
      console.error('‚ùå Erreur approbation annonce:', error)
      throw error
    }
  },

  /**
   * Rejeter une annonce (v√©t√©rinaires uniquement)
   */
  async rejectLostAnimal(id, rejectionData = {}) {
    try {
      console.log('‚ùå Rejet annonce:', id, rejectionData)
      const response = await apiClient.post(API_ENDPOINTS.LOST_ANIMALS.REJECT(id), rejectionData)
      
      console.log('‚úÖ Annonce rejet√©e:', response.data)
      
      return {
        success: true,
        data: response.data.data || response.data,
        message: response.data.message || 'Annonce rejet√©e'
      }
    } catch (error) {
      console.error('‚ùå Erreur rejet annonce:', error)
      throw error
    }
  },

  /**
   * R√©soudre une annonce (marquer comme trouv√©e/r√©solue)
   */
  async resolveLostAnimal(id, resolutionData = {}) {
    try {
      console.log('üéâ R√©solution annonce:', id, resolutionData)
      const response = await apiClient.post(API_ENDPOINTS.LOST_ANIMALS.RESOLVE(id), resolutionData)
      
      console.log('‚úÖ Annonce r√©solue:', response.data)
      
      return {
        success: true,
        data: response.data.data || response.data,
        message: response.data.message || 'Annonce r√©solue avec succ√®s'
      }
    } catch (error) {
      console.error('‚ùå Erreur r√©solution annonce:', error)
      throw error
    }
  },

  /**
   * Notifier les utilisateurs dans une zone g√©ographique
   */
  async notifyArea(animalId, notificationData) {
    try {
      console.log('üìß Notification zone:', animalId, notificationData)
      const response = await apiClient.post(API_ENDPOINTS.LOST_ANIMALS.NOTIFY_AREA(animalId), notificationData)
      
      console.log('‚úÖ Notifications envoy√©es:', response.data)
      
      return {
        success: true,
        data: response.data.data || response.data,
        message: response.data.message || 'Notifications envoy√©es avec succ√®s'
      }
    } catch (error) {
      console.error('‚ùå Erreur notification zone:', error)
      throw error
    }
  },

  /**
   * R√©cup√©rer mes annonces (utilisateur connect√©)
   * @param {Object} options - Options de requ√™te
   * @returns {Promise<Object>} R√©ponse de l'API
   */
  async getMyAnimals(options = {}) {
    try {
      console.log('üë§ R√©cup√©ration de mes annonces')
      
      const searchOptions = {
        my_animals: true,
        ...options
      }
      
      return await this.getLostAnimals(searchOptions)
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration mes annonces:', error)
      return {
        success: false,
        error: error.message || 'Erreur lors de la r√©cup√©ration de mes annonces'
      }
    }
  },

  /**
   * R√©cup√©rer les statistiques des annonces
   * @returns {Promise<Object>} R√©ponse de l'API
   */
  async getAnimalsStats() {
    try {
      console.log('üìä R√©cup√©ration statistiques annonces')
      const response = await apiClient.get(API_ENDPOINTS.LOST_ANIMALS.STATS)
      
      console.log('üìä Statistiques annonces:', response.data)
      
      return {
        success: true,
        data: response.data.data || response.data,
        message: response.data.message || 'Statistiques r√©cup√©r√©es avec succ√®s'
      }
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration statistiques:', error)
      return {
        success: false,
        error: error.response?.data?.message || error.message || 'Erreur lors de la r√©cup√©ration des statistiques'
      }
    }
  },

  /**
   * R√©cup√©rer MES annonces (toutes, peu importe le statut)
   * @param {Object} options - Options de filtrage et pagination
   * @returns {Promise<Object>} R√©ponse de l'API
   */
  async getMyAnimals(options = {}) {
    try {
      const params = new URLSearchParams()
      
      // Filtres disponibles selon la collection Postman
      if (options.status) params.append('status', options.status) // pending, approved, rejected
      if (options.type && options.type !== 'all') params.append('type', options.type) // lost, found
      if (options.animal_type) params.append('animal_type', options.animal_type) // chien, chat, etc.
      if (options.search) params.append('search', options.search)
      
      // Pagination
      if (options.page) params.append('page', options.page)
      if (options.per_page) params.append('per_page', options.per_page)
      
      // Tri
      if (options.sort_by) params.append('sort_by', options.sort_by)
      if (options.sort_order) params.append('sort_order', options.sort_order)
      
      const queryString = params.toString()
      const url = queryString ? `${API_ENDPOINTS.LOST_ANIMALS.MY_ANIMALS}?${queryString}` : API_ENDPOINTS.LOST_ANIMALS.MY_ANIMALS
      
      console.log('üîç R√©cup√©ration de mes annonces:', url)
      const response = await apiClient.get(url)
      
      console.log('‚úÖ Mes annonces r√©cup√©r√©es:', response.data)
      
      // Gestion de diff√©rents formats de r√©ponse API
      let animalsData = []
      let paginationData = null
      
      if (response.data.data && response.data.data.data) {
        // Format pagin√©: { success: true, data: { data: [...], current_page: 1, ... } }
        animalsData = response.data.data.data
        paginationData = {
          current_page: response.data.data.current_page,
          per_page: response.data.data.per_page,
          total: response.data.data.total,
          last_page: response.data.data.last_page
        }
        console.log('üì¶ Format pagin√© d√©tect√©, annonces extraites:', animalsData.length)
      } else if (response.data.data && Array.isArray(response.data.data)) {
        // Format simple: { success: true, data: [...] }
        animalsData = response.data.data
        console.log('üì¶ Format simple d√©tect√©, annonces extraites:', animalsData.length)
      } else if (Array.isArray(response.data)) {
        // Format direct: [...]
        animalsData = response.data
        console.log('üì¶ Format direct d√©tect√©, annonces extraites:', animalsData.length)
      }
      
      return {
        success: true,
        data: animalsData,
        pagination: paginationData,
        filters: options,
        message: response.data.message || 'Mes annonces r√©cup√©r√©es avec succ√®s'
      }
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration mes annonces:', error)
      return {
        success: false,
        error: error.response?.data?.message || error.message || 'Erreur lors de la r√©cup√©ration de vos annonces'
      }
    }
  }
}

export default lostAnimalsService
