import { apiClient } from '@/services/api/config.js'
import { API_ENDPOINTS } from '@/services/api/endpoints.js'

/**
 * Service pour la gestion des d√©penses (expenses)
 * Bas√© sur la collection Postman Expenses API
 */
export const expenseService = {

  /**
   * R√©cup√©rer toutes les d√©penses avec pagination et filtres
   * @param {Object} options - Options de requ√™te (pagination, filtres)
   * @returns {Promise<Object>} R√©ponse API avec liste des d√©penses
   */
  async getExpenses(options = {}) {
    try {
      console.log('üìã R√©cup√©ration des d√©penses avec options:', options)
      
      const params = new URLSearchParams()
      
      // Pagination
      if (options.page) params.append('page', options.page)
      if (options.per_page) params.append('per_page', options.per_page)
      
      // Filtres
      if (options.category) params.append('category', options.category)
      if (options.status) params.append('status', options.status)
      if (options.tax_deductible !== undefined) params.append('tax_deductible', options.tax_deductible)
      if (options.start_date) params.append('start_date', options.start_date)
      if (options.end_date) params.append('end_date', options.end_date)
      if (options.min_amount) params.append('min_amount', options.min_amount)
      if (options.max_amount) params.append('max_amount', options.max_amount)
      if (options.search) params.append('search', options.search)
      
      // Tri
      if (options.sort_by) params.append('sort_by', options.sort_by)
      if (options.sort_order) params.append('sort_order', options.sort_order)
      
      // Relations
      if (options.with_user) params.append('with_user', options.with_user)
      if (options.with_receipts) params.append('with_receipts', options.with_receipts)

      const queryString = params.toString()
      const url = queryString ? `${API_ENDPOINTS.EXPENSES.LIST}?${queryString}` : API_ENDPOINTS.EXPENSES.LIST

      const response = await apiClient.get(url)
      
      console.log('‚úÖ R√©ponse API expenses:', response)
      
      // G√©rer la nouvelle structure avec expenses
      let expensesData = []
      let paginationData = {}
      
      if (response.data && response.data.expenses && Array.isArray(response.data.expenses)) {
        // Nouvelle structure: { data: { success: true, expenses: [...], pagination: {...} } }
        expensesData = response.data.expenses
        paginationData = response.data.pagination || {}
      } else {
        // Fallback vers ancienne structure
        expensesData = response.data?.data || response.data || []
        paginationData = response.data || {}
      }
      
      console.log('‚úÖ D√©penses r√©cup√©r√©es:', expensesData.length)
      return {
        success: true,
        data: expensesData,
        pagination: {
          current_page: paginationData.current_page || 1,
          last_page: paginationData.last_page || 1,
          per_page: paginationData.per_page || 15,
          total: paginationData.total || 0,
          from: paginationData.from || 0,
          to: paginationData.to || 0
        },
        message: response.message || 'D√©penses r√©cup√©r√©es avec succ√®s'
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des d√©penses:', error)
      return {
        success: false,
        data: [],
        error: error.response?.data?.message || error.message || 'Erreur lors de la r√©cup√©ration des d√©penses'
      }
    }
  },

  /**
   * R√©cup√©rer les d√©penses de l'utilisateur connect√©
   * @param {Object} options - Options de requ√™te
   * @returns {Promise<Object>} R√©ponse API avec d√©penses utilisateur
   */
  async getMyExpenses(options = {}) {
    try {
      console.log('üë§ R√©cup√©ration de mes d√©penses avec options:', options)
      
      const params = new URLSearchParams()
      
      // Pagination
      if (options.page) params.append('page', options.page)
      if (options.per_page) params.append('per_page', options.per_page)
      
      // Filtres sp√©cifiques
      if (options.category) params.append('category', options.category)
      if (options.status) params.append('status', options.status)
      if (options.start_date) params.append('start_date', options.start_date)
      if (options.end_date) params.append('end_date', options.end_date)

      const queryString = params.toString()
      const url = queryString ? `${API_ENDPOINTS.EXPENSES.MY_EXPENSES}?${queryString}` : API_ENDPOINTS.EXPENSES.MY_EXPENSES

      const response = await apiClient.get(url)
      
      console.log('‚úÖ R√©ponse API my-expenses compl√®te:', response)
      console.log('‚úÖ response.data:', response.data)
      console.log('‚úÖ response.data.expenses:', response.data?.expenses)
      console.log('‚úÖ response.data.pagination:', response.data?.pagination)
      
      // G√©rer la nouvelle structure avec expenses
      let expensesData = []
      let paginationData = {}
      
      if (response.data && response.data.expenses && Array.isArray(response.data.expenses)) {
        // Nouvelle structure: { data: { success: true, expenses: [...], pagination: {...} } }
        expensesData = response.data.expenses
        paginationData = response.data.pagination || {}
      } else if (response.data && response.data.data && response.data.data.data && Array.isArray(response.data.data.data)) {
        // Ancienne structure: { data: { success: true, data: { data: [...], current_page: 1 } } }
        expensesData = response.data.data.data
        paginationData = response.data.data
      } else if (response.data && response.data.data && Array.isArray(response.data.data)) {
        // Structure: { data: { data: [...], current_page: 1, ... } }
        expensesData = response.data.data
        paginationData = response.data
      } else if (response.data && Array.isArray(response.data)) {
        // Structure: { data: [...] }
        expensesData = response.data
        paginationData = response
      } else if (Array.isArray(response)) {
        // Structure directe: [...]
        expensesData = response
        paginationData = {}
      } else {
        // Fallback
        expensesData = []
        paginationData = {}
      }
      
      console.log('‚úÖ expensesData apr√®s extraction:', expensesData)
      console.log('‚úÖ Type de expensesData:', typeof expensesData)
      console.log('‚úÖ Est-ce un array?', Array.isArray(expensesData))
      console.log('‚úÖ Mes d√©penses r√©cup√©r√©es:', Array.isArray(expensesData) ? expensesData.length : 'Pas un array')
      return {
        success: true,
        data: expensesData,
        pagination: {
          current_page: paginationData.current_page || 1,
          last_page: paginationData.last_page || 1,
          per_page: paginationData.per_page || 15,
          total: paginationData.total || 0,
          from: paginationData.from || 0,
          to: paginationData.to || 0
        },
        message: response.message || 'Mes d√©penses r√©cup√©r√©es avec succ√®s'
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de mes d√©penses:', error)
      return {
        success: false,
        data: [],
        error: error.response?.data?.message || error.message || 'Erreur lors de la r√©cup√©ration de mes d√©penses'
      }
    }
  },

  /**
   * R√©cup√©rer une d√©pense par son ID
   * @param {string} expenseId - ID de la d√©pense
   * @returns {Promise<Object>} R√©ponse API avec d√©tails de la d√©pense
   */
  async getExpenseById(expenseId) {
    try {
      console.log('üîç R√©cup√©ration de la d√©pense:', expenseId)
      
      const response = await apiClient.get(API_ENDPOINTS.EXPENSES.DETAIL(expenseId))
      
      console.log('‚úÖ D√©pense r√©cup√©r√©e:', response.id)
      return {
        success: true,
        data: response,
        message: 'D√©pense r√©cup√©r√©e avec succ√®s'
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de la d√©pense:', error)
      return {
        success: false,
        data: null,
        error: error.response?.data?.message || error.message || 'D√©pense non trouv√©e'
      }
    }
  },

  /**
   * Cr√©er une nouvelle d√©pense
   * @param {Object} expenseData - Donn√©es de la d√©pense
   * @returns {Promise<Object>} R√©ponse API avec d√©pense cr√©√©e
   */
  async createExpense(expenseData) {
    try {
      // Validation des champs requis (comme createStock)
      const requiredFields = ['title', 'amount', 'category', 'expense_date']
      for (const field of requiredFields) {
        if (!expenseData[field]) {
          throw new Error(`Le champ ${field} est requis`)
        }
      }

      // Pr√©parer les donn√©es pour l'API (structure exacte du body)
      const data = {
        title: expenseData.title,
        description: expenseData.description || '',
        amount: Number(expenseData.amount),
        category: expenseData.category,
        expense_date: expenseData.expense_date,
        supplier: expenseData.supplier || null,
        invoice_number: expenseData.invoice_number || null,
        tax_amount: expenseData.tax_amount ? Number(expenseData.tax_amount) : null,
        tax_deductible: expenseData.tax_deductible || false,
        payment_method: expenseData.payment_method || 'card',
        status: expenseData.status || 'pending',
        notes: expenseData.notes || null
      }

      console.log('üìù Cr√©ation de la d√©pense:', data)
      const response = await apiClient.post(API_ENDPOINTS.EXPENSES.CREATE, data)
      
      console.log('‚úÖ R√©ponse API cr√©ation:', response.data)
      
      return {
        success: response.data.success || true,
        message: response.data.message || 'D√©pense cr√©√©e avec succ√®s',
        data: response.data.data || response.data
      }
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation d√©pense:', error)
      return {
        success: false,
        error: error.response?.data?.message || error.message || 'Erreur lors de la cr√©ation de la d√©pense'
      }
    }
  },

  /**
   * Mettre √† jour une d√©pense
   * @param {string} expenseId - ID de la d√©pense
   * @param {Object} updateData - Donn√©es √† mettre √† jour
   * @returns {Promise<Object>} R√©ponse API avec d√©pense mise √† jour
   */
  async updateExpense(expenseId, updateData) {
    try {
      console.log('‚úèÔ∏è Mise √† jour partielle de la d√©pense (PATCH):', expenseId, updateData)
      
      // Utilisation de PATCH pour mise √† jour partielle (plus appropri√© que PUT)
      const response = await apiClient.patch(API_ENDPOINTS.EXPENSES.UPDATE(expenseId), updateData)
      
      console.log('‚úÖ R√©ponse API modification PATCH:', response.data)
      
      return {
        success: response.data.success || true,
        message: response.data.message || 'D√©pense mise √† jour avec succ√®s',
        data: response.data.data || response.data
      }
      
    } catch (error) {
      console.error('‚ùå Erreur modification d√©pense PATCH:', error)
      return {
        success: false,
        error: error.response?.data?.message || error.message || 'Erreur lors de la mise √† jour de la d√©pense'
      }
    }
  },

  /**
   * Supprimer une d√©pense
   * @param {string} expenseId - ID de la d√©pense
   * @returns {Promise<Object>} R√©ponse API de suppression
   */
  async deleteExpense(expenseId) {
    try {
      console.log('üóëÔ∏è Suppression de la d√©pense:', expenseId)
      
      const response = await apiClient.delete(API_ENDPOINTS.EXPENSES.DELETE(expenseId))
      
      console.log('‚úÖ R√©ponse API suppression:', response.data)
      
      return {
        success: response.data.success || true,
        message: response.data.message || 'D√©pense supprim√©e avec succ√®s',
        data: response.data.data || { id: expenseId }
      }
      
    } catch (error) {
      console.error('‚ùå Erreur suppression d√©pense:', error)
      return {
        success: false,
        error: error.response?.data?.message || error.message || 'Erreur lors de la suppression de la d√©pense'
      }
    }
  },

  /**
   * Rechercher des d√©penses
   * @param {string} searchTerm - Terme de recherche
   * @param {Object} options - Options de recherche
   * @returns {Promise<Object>} R√©ponse API avec r√©sultats de recherche
   */
  async searchExpenses(searchTerm, options = {}) {
    try {
      console.log('üîç Recherche de d√©penses:', searchTerm, options)
      
      const params = new URLSearchParams()
      params.append('search', searchTerm)
      
      // Options de recherche
      if (options.category) params.append('category', options.category)
      if (options.status) params.append('status', options.status)
      if (options.page) params.append('page', options.page)
      if (options.per_page) params.append('per_page', options.per_page)

      const url = `${API_ENDPOINTS.EXPENSES.SEARCH}?${params.toString()}`
      const response = await apiClient.get(url)
      
      console.log('‚úÖ R√©ponse API search:', response)
      
      // G√©rer la nouvelle structure avec expenses
      let expensesData = []
      let paginationData = {}
      
      if (response.data && response.data.expenses && Array.isArray(response.data.expenses)) {
        // Nouvelle structure: { data: { success: true, expenses: [...], pagination: {...} } }
        expensesData = response.data.expenses
        paginationData = response.data.pagination || {}
      } else {
        // Fallback vers ancienne structure
        expensesData = response.data?.data || response.data || []
        paginationData = response.data || {}
      }
      
      console.log('‚úÖ Recherche termin√©e:', expensesData.length, 'r√©sultats')
      return {
        success: true,
        data: expensesData,
        pagination: {
          current_page: paginationData.current_page || 1,
          last_page: paginationData.last_page || 1,
          per_page: paginationData.per_page || 15,
          total: paginationData.total || 0,
          from: paginationData.from || 0,
          to: paginationData.to || 0
        },
        message: response.message || 'Recherche termin√©e avec succ√®s'
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la recherche:', error)
      return {
        success: false,
        data: [],
        error: error.response?.data?.message || error.message || 'Erreur lors de la recherche'
      }
    }
  },

  /**
   * Changer le statut d'une d√©pense (approuver/rejeter)
   * @param {string} expenseId - ID de la d√©pense
   * @param {string} status - Nouveau statut (approved, rejected, pending)
   * @param {string} reason - Raison du changement (optionnel)
   * @returns {Promise<Object>} R√©ponse API
   */
  async updateExpenseStatus(expenseId, status, reason = null) {
    try {
      console.log('üìù Changement de statut de la d√©pense:', expenseId, 'vers', status)
      
      const data = { status }
      if (reason) data.reason = reason

      const response = await apiClient.patch(API_ENDPOINTS.EXPENSES.UPDATE_STATUS(expenseId), data)
      
      console.log('‚úÖ Statut mis √† jour avec succ√®s:', status)
      return {
        success: true,
        data: response,
        message: response.message || 'Statut mis √† jour avec succ√®s'
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors du changement de statut:', error)
      return {
        success: false,
        data: null,
        error: error.response?.data?.message || error.message || 'Erreur lors du changement de statut'
      }
    }
  },

  /**
   * Restaurer une d√©pense supprim√©e
   * @param {string} expenseId - ID de la d√©pense
   * @returns {Promise<Object>} R√©ponse API
   */
  async restoreExpense(expenseId) {
    try {
      console.log('‚ôªÔ∏è Restauration de la d√©pense:', expenseId)
      
      const response = await apiClient.patch(API_ENDPOINTS.EXPENSES.RESTORE(expenseId))
      
      console.log('‚úÖ D√©pense restaur√©e avec succ√®s:', expenseId)
      return {
        success: true,
        data: response,
        message: response.message || 'D√©pense restaur√©e avec succ√®s'
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la restauration:', error)
      return {
        success: false,
        data: null,
        error: error.response?.data?.message || error.message || 'Erreur lors de la restauration'
      }
    }
  },

}

export default expenseService
