import { apiClient } from '@/services/api/config.js'
import { API_ENDPOINTS } from '@/services/api/endpoints.js'

/**
 * Service pour g√©rer les abonnements et upgrades Pro
 */
export const subscriptionService = {
  /**
   * Upgrade vers un compte Pro
   * @returns {Promise<Object>} R√©ponse de l'API
   */
  async upgradeToProAccount() {
    try {
      console.log('‚≠ê Demande upgrade vers compte Pro...')
      console.log('üåê URL endpoint:', API_ENDPOINTS.USERS.UPGRADE_TO_PRO)
      console.log('üîó Appel API POST en cours...')
      
      const response = await apiClient.post(API_ENDPOINTS.USERS.UPGRADE_TO_PRO)
      
      console.log('üì¶ R√©ponse API upgrade Pro:', response.data)
      console.log('üìä Status code:', response.status)
      console.log('üìã Headers:', response.headers)
      
      // V√©rifier la structure de la r√©ponse
      if (response.data && response.data.success) {
        return {
          success: true,
          message: response.data.message || 'Compte mis √† niveau vers Pro avec succ√®s',
          data: response.data.data || response.data.user,
          user: response.data.user || response.data.data
        }
      } else {
        console.warn('‚ö†Ô∏è R√©ponse API inattendue:', response.data)
        return {
          success: false,
          message: response.data?.message || 'Erreur lors de la mise √† niveau',
          error: response.data?.error || 'R√©ponse API inattendue'
        }
      }
    } catch (error) {
      console.error('‚ùå Erreur upgrade Pro:', error)
      
      // Gestion des erreurs sp√©cifiques
      if (error.response?.status === 400) {
        return {
          success: false,
          message: 'Votre compte est d√©j√† Pro ou ne peut pas √™tre mis √† niveau',
          error: error.response.data?.message || 'Requ√™te invalide'
        }
      }
      
      if (error.response?.status === 403) {
        return {
          success: false,
          message: 'Vous n\'avez pas les permissions pour effectuer cette action',
          error: 'Acc√®s refus√©'
        }
      }
      
      if (error.response?.status === 409) {
        return {
          success: false,
          message: 'Votre compte est d√©j√† Pro',
          error: 'Compte d√©j√† Pro'
        }
      }
      
      return {
        success: false,
        message: 'Erreur lors de la mise √† niveau vers Pro. Veuillez r√©essayer.',
        error: error.response?.data?.message || error.message || 'Erreur r√©seau'
      }
    }
  },

  /**
   * V√©rifier le statut Pro d'un utilisateur
   * @returns {Promise<Object>} Statut Pro de l'utilisateur
   */
  async checkProStatus() {
    try {
      console.log('üîç V√©rification statut Pro...')
      
      const response = await apiClient.get(API_ENDPOINTS.USERS.PROFILE)
      
      if (response.data && response.data.success) {
        const user = response.data.data || response.data.user
        
        return {
          success: true,
          isPro: user?.user_type === 'veterinarian_pro' || user?.subscription_type === 'pro',
          user: user
        }
      }
      
      return {
        success: false,
        isPro: false,
        error: 'Impossible de v√©rifier le statut Pro'
      }
    } catch (error) {
      console.error('‚ùå Erreur v√©rification statut Pro:', error)
      return {
        success: false,
        isPro: false,
        error: error.message
      }
    }
  },

  /**
   * Simuler un upgrade Pro (pour les tests)
   * @returns {Promise<Object>} R√©ponse simul√©e
   */
  async simulateUpgradeToPro() {
    console.log('üé≠ Simulation upgrade Pro...')
    
    // Simuler un d√©lai d'API
    await new Promise(resolve => setTimeout(resolve, 2000))
    
    // Simuler une r√©ponse r√©ussie
    return {
      success: true,
      message: 'Compte mis √† niveau vers Pro avec succ√®s (simulation)',
      data: {
        id: 'user-123',
        user_type: 'veterinarian_pro',
        subscription_type: 'pro',
        subscription_start_date: new Date().toISOString(),
        pro_features: [
          'advanced_accounting',
          'stock_management',
          'detailed_reports',
          'multi_clinic_support',
          'priority_support'
        ]
      }
    }
  }
}

export default subscriptionService
