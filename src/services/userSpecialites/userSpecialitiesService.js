import { apiClient } from '@/services/api/config.js'
import { API_ENDPOINTS } from '@/services/api/endpoints.js'

/**
 * Service pour la gestion des sp√©cialit√©s utilisateur
 * Bas√© sur la collection Postman User_Specialites_Collection
 */
export const userSpecialitiesService = {
  
  /**
   * R√©cup√©rer mes sp√©cialit√©s
   * GET /user/specialties
   */
  async getMySpecialities(options = {}) {
    try {
      console.log('üìã R√©cup√©ration de mes sp√©cialit√©s:', options)
      
      // Construction des param√®tres de requ√™te
      const queryParams = new URLSearchParams()
      
      // Param√®tres de pagination
      if (options.page) queryParams.append('page', options.page)
      if (options.per_page) queryParams.append('per_page', options.per_page)
      
      // Param√®tres de filtrage
      if (options.search) queryParams.append('search', options.search)
      if (options.certification_level) queryParams.append('certification_level', options.certification_level)
      if (options.is_primary !== undefined) queryParams.append('is_primary', options.is_primary)
      
      // Param√®tres de tri
      if (options.sort_by) queryParams.append('sort_by', options.sort_by)
      if (options.sort_order) queryParams.append('sort_order', options.sort_order)
      
      // Param√®tres d'inclusion
      if (options.with_specialty) queryParams.append('with_specialty', 'true')
      
      const url = `${API_ENDPOINTS.USER_SPECIALITES.LIST}?${queryParams.toString()}`
      const response = await apiClient.get(url)
      
      console.log('‚úÖ R√©ponse API mes sp√©cialit√©s:', response.data)
      
      // Extraire les donn√©es selon le format de r√©ponse
      let specialitiesData = []
      if (response.data.data) {
        specialitiesData = response.data.data
      } else if (response.data.specialties) {
        specialitiesData = response.data.specialties
      } else if (response.data.services) {
        specialitiesData = response.data.services
      } else if (Array.isArray(response.data)) {
        specialitiesData = response.data
      }
      
      console.log('üìã Donn√©es sp√©cialit√©s extraites:', specialitiesData)
      
      return {
        success: response.data.success || true,
        message: response.data.message || 'Sp√©cialit√©s r√©cup√©r√©es avec succ√®s',
        data: specialitiesData,
        pagination: response.data.pagination || null
      }
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration mes sp√©cialit√©s:', error)
      return {
        success: false,
        error: error.response?.data?.message || error.message || 'Erreur lors de la r√©cup√©ration des sp√©cialit√©s'
      }
    }
  },

  /**
   * Ajouter une sp√©cialit√© √† l'utilisateur
   * POST /user/specialties
   */
  async addSpeciality(specialityData) {

    console.log('‚ûï Ajout d\'une sp√©cialit√©: COTE SOTE', specialityData)
    try {
      
      // Validation des donn√©es requises
      console.log('Validation des donn√©es de la sp√©cialit√©: COTE SOTE', specialityData.specialite_id)
      if (!specialityData.specialite_id) {
        throw new Error('L\'ID de la sp√©cialit√© est requis')
      }
      
      const response = await apiClient.post(API_ENDPOINTS.USER_SPECIALITES.CREATE, specialityData)
      console.log('‚úÖ R√©ponse API ajout sp√©cialit√©:', response.data)
      
      return {
        success: response.data.success || true,
        message: response.data.message || 'Sp√©cialit√© ajout√©e avec succ√®s',
        data: response.data.data || response.data
      }
    } catch (error) {
      console.error('‚ùå Erreur ajout sp√©cialit√©:', error)
      return {
        success: false,
        error: error.response?.data?.message || error.message || 'Erreur lors de l\'ajout de la sp√©cialit√©'
      }
    }
  },

  /**
   * Modifier une sp√©cialit√© utilisateur
   * PUT /user/specialties/{id}
   */
  async updateSpeciality(id, specialityData) {
    try {
      console.log('‚úèÔ∏è Modification sp√©cialit√© utilisateur:', id, specialityData)
      
      const response = await apiClient.put(API_ENDPOINTS.USER_SPECIALITES.UPDATE(id), specialityData)
      console.log('‚úÖ R√©ponse API modification sp√©cialit√©:', response.data)
      
      return {
        success: response.data.success || true,
        message: response.data.message || 'Sp√©cialit√© modifi√©e avec succ√®s',
        data: response.data.data || response.data
      }
    } catch (error) {
      console.error('‚ùå Erreur modification sp√©cialit√©:', error)
      return {
        success: false,
        error: error.response?.data?.message || error.message || 'Erreur lors de la modification de la sp√©cialit√©'
      }
    }
  },

  /**
   * Supprimer une sp√©cialit√© utilisateur
   * DELETE /user/specialties/{id}
   */
  async removeSpeciality(id) {
    try {
      console.log('üóëÔ∏è Suppression sp√©cialit√© utilisateur:', id)
      
      const response = await apiClient.delete(API_ENDPOINTS.USER_SPECIALITES.DELETE(id))
      console.log('‚úÖ R√©ponse API suppression sp√©cialit√©:', response.data)
      
      return {
        success: response.data.success || true,
        message: response.data.message || 'Sp√©cialit√© supprim√©e avec succ√®s',
        data: response.data.data || { id }
      }
    } catch (error) {
      console.error('‚ùå Erreur suppression sp√©cialit√©:', error)
      return {
        success: false,
        error: error.response?.data?.message || error.message || 'Erreur lors de la suppression de la sp√©cialit√©'
      }
    }
  },

  /**
   * R√©cup√©rer une sp√©cialit√© utilisateur par ID
   * GET /user/specialties/{id}
   */
  async getSpecialityById(id, options = {}) {
    try {
      console.log('üîç R√©cup√©ration sp√©cialit√© utilisateur par ID:', id, options)
      
      // Construction des param√®tres de requ√™te
      const queryParams = new URLSearchParams()
      
      // Param√®tres d'inclusion
      if (options.with_specialty) queryParams.append('with_specialty', 'true')
      
      const url = `${API_ENDPOINTS.USER_SPECIALITES.DETAIL(id)}?${queryParams.toString()}`
      const response = await apiClient.get(url)
      
      console.log('‚úÖ R√©ponse API sp√©cialit√© par ID:', response.data)
      
      return {
        success: response.data.success || true,
        message: response.data.message || 'Sp√©cialit√© r√©cup√©r√©e avec succ√®s',
        data: response.data.data || response.data
      }
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration sp√©cialit√© par ID:', error)
      return {
        success: false,
        error: error.response?.data?.message || error.message || 'Erreur lors de la r√©cup√©ration de la sp√©cialit√©'
      }
    }
  },

  /**
   * D√©finir une sp√©cialit√© comme principale
   * PUT /user/specialties/{id} avec is_primary: true
   */
  async setPrimarySpeciality(id) {
    try {
      console.log('‚≠ê D√©finition sp√©cialit√© principale:', id)
      
      const response = await apiClient.put(API_ENDPOINTS.USER_SPECIALITES.UPDATE(id), {
        is_primary: true
      })
      
      console.log('‚úÖ R√©ponse API sp√©cialit√© principale:', response.data)
      
      return {
        success: response.data.success || true,
        message: response.data.message || 'Sp√©cialit√© d√©finie comme principale',
        data: response.data.data || response.data
      }
    } catch (error) {
      console.error('‚ùå Erreur d√©finition sp√©cialit√© principale:', error)
      return {
        success: false,
        error: error.response?.data?.message || error.message || 'Erreur lors de la d√©finition de la sp√©cialit√© principale'
      }
    }
  },

  /**
   * Valider les donn√©es d'une sp√©cialit√© utilisateur
   */
  validateSpecialityData(data) {
    const errors = {}

    console.log('Validation des donn√©es de la sp√©cialit√©:', data)
    
    // Validation specialite_id (requis pour ajout)
    if (!data.specialite_id) {
      console.log('La sp√©cialit√© est requise COTE SOTE')
      errors.specialite_id = 'La sp√©cialit√© est requise'
    }
    
    // Validation certification_level (optionnel mais doit √™tre valide)
    const validCertificationLevels = ['junior', 'senior', 'expert']
    if (data.certification_level && !validCertificationLevels.includes(data.certification_level)) {
      console.log('Le niveau de certification est invalide COTE SOTE')
      errors.certification_level = 'Niveau de certification invalide'
    }
    
    // Validation is_primary (doit √™tre boolean)
    if (data.is_primary !== undefined && typeof data.is_primary !== 'boolean') {
      console.log('Le statut principal est invalide COTE SOTE')
      errors.is_primary = 'Le statut principal doit √™tre un bool√©en'
    }
    
    return {
      isValid: Object.keys(errors).length === 0,
      errors
    }
  },

  /**
   * Formater les donn√©es pour l'affichage
   */
  formatSpecialityForDisplay(speciality) {
    return {
      id: speciality.id,
      name: speciality.specialty?.name || speciality.name,
      description: speciality.specialty?.description || speciality.description,
      certificationLevel: speciality.certification_level,
      certificationLevelLabel: this.getCertificationLevelLabel(speciality.certification_level),
      isPrimary: speciality.is_primary,
      isPrimaryLabel: speciality.is_primary ? 'Principale' : 'Secondaire',
      specialty: speciality.specialty || null
    }
  },

  /**
   * Obtenir le label du niveau de certification
   */
  getCertificationLevelLabel(level) {
    const labels = {
      'junior': 'Junior',
      'senior': 'Senior',
      'expert': 'Expert'
    }
    return labels[level] || level
  },

  /**
   * Obtenir la couleur du niveau de certification
   */
  getCertificationLevelColor(level) {
    const colors = {
      'junior': '#10B981',       // green-500
      'senior': '#3B82F6',       // blue-500
      'expert': '#F59E0B'        // amber-500
    }
    return colors[level] || '#6B7280' // gray-500
  },

  /**
   * Obtenir l'ic√¥ne du niveau de certification
   */
  getCertificationLevelIcon(level) {
    const icons = {
      'junior': 'üå±',
      'senior': 'üéØ',
      'expert': '‚≠ê'
    }
    return icons[level] || 'üìã'
  }
}
