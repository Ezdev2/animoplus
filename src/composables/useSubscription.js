import { ref, computed } from 'vue'
import { subscriptionService } from '@/services/subscription/subscriptionService.js'
import { useSimpleAuth } from '@/composables/useSimpleAuth.js'
import { useToast } from '@/composables/useToast.js'

/**
 * Composable pour g√©rer les abonnements et upgrades Pro
 */
export function useSubscription() {
  // √âtats r√©actifs
  const isUpgrading = ref(false)
  const isCheckingStatus = ref(false)
  const upgradeError = ref(null)
  
  // Acc√®s √† l'auth et aux toasts
  const auth = useSimpleAuth()
  const { showToast } = useToast()
  
  // Computed pour v√©rifier si l'utilisateur est Pro
  const isUserPro = computed(() => {
    const user = auth.getCurrentUser.value
    if (!user) return false
    
    // V√©rifier diff√©rents indicateurs de statut Pro
    return user.user_type === 'veterinarian_pro' || 
           user.subscription_type === 'pro' ||
           user.is_pro === true
  })
  
  // Computed pour v√©rifier si l'utilisateur peut upgrader
  const canUpgrade = computed(() => {
    const user = auth.getCurrentUser.value
    if (!user) return false
    
    // Seuls les v√©t√©rinaires peuvent upgrader vers Pro
    return user.user_type === 'veterinarian' && !isUserPro.value
  })
  
  /**
   * Upgrade vers un compte Pro
   * @param {boolean} useSimulation - Utiliser la simulation ou l'API r√©elle
   * @returns {Promise<Object>} R√©sultat de l'upgrade
   */
  const upgradeToPro = async (useSimulation = false) => {
    if (isUpgrading.value) {
      console.warn('‚ö†Ô∏è Upgrade d√©j√† en cours...')
      return { success: false, message: 'Upgrade d√©j√† en cours' }
    }
    
    isUpgrading.value = true
    upgradeError.value = null
    
    try {
      console.log('‚≠ê D√©but upgrade vers Pro...', { useSimulation })
      
      let result
      
      if (useSimulation) {
        // Utiliser la simulation pour les tests
        console.log('üé≠ Mode SIMULATION activ√©')
        result = await subscriptionService.simulateUpgradeToPro()
      } else {
        // Utiliser l'API r√©elle
        console.log('üåê Mode API R√âELLE activ√© - Appel vers le backend')
        result = await subscriptionService.upgradeToProAccount()
      }
      
      if (result.success) {
        console.log('‚úÖ Upgrade Pro r√©ussi:', result)
        
        // IMPORTANT: Mettre √† jour les donn√©es utilisateur SEULEMENT si l'API confirme le succ√®s
        if (result.user || result.data) {
          const updatedUser = result.user || result.data
          
          // V√©rifier que l'utilisateur a bien √©t√© mis √† niveau vers Pro
          const isNowPro = updatedUser.user_type === 'veterinarian_pro' || 
                          updatedUser.subscription_type === 'pro' ||
                          updatedUser.is_pro === true
          
          if (isNowPro) {
            console.log('üéØ Confirmation API: Utilisateur est maintenant Pro')
            await auth.updateUserData(updatedUser)
            console.log('üîÑ Donn√©es utilisateur mises √† jour:', updatedUser)
          } else {
            console.warn('‚ö†Ô∏è API a r√©pondu succ√®s mais utilisateur pas Pro:', updatedUser)
          }
        }
        
        // Afficher un toast de succ√®s
        showToast({
          type: 'success',
          title: 'F√©licitations ! üéâ',
          message: result.message || 'Votre compte est maintenant Pro !',
          duration: 5000
        })
        
        return result
      } else {
        console.error('‚ùå √âchec upgrade Pro:', result)
        upgradeError.value = result.error || result.message
        
        // Afficher un toast d'erreur
        showToast({
          type: 'error',
          title: 'Erreur upgrade Pro',
          message: result.message || 'Impossible de mettre √† niveau votre compte',
          duration: 5000
        })
        
        return result
      }
    } catch (error) {
      console.error('‚ùå Erreur upgrade Pro:', error)
      upgradeError.value = error.message
      
      showToast({
        type: 'error',
        title: 'Erreur technique',
        message: 'Une erreur technique est survenue. Veuillez r√©essayer.',
        duration: 5000
      })
      
      return {
        success: false,
        message: 'Erreur technique lors de l\'upgrade',
        error: error.message
      }
    } finally {
      isUpgrading.value = false
    }
  }
  
  /**
   * V√©rifier le statut Pro de l'utilisateur
   * @returns {Promise<boolean>} True si l'utilisateur est Pro
   */
  const checkProStatus = async () => {
    if (isCheckingStatus.value) return isUserPro.value
    
    isCheckingStatus.value = true
    
    try {
      const result = await subscriptionService.checkProStatus()
      
      if (result.success && result.user) {
        // Mettre √† jour les donn√©es utilisateur
        await auth.updateUserData(result.user)
      }
      
      return result.isPro || false
    } catch (error) {
      console.error('‚ùå Erreur v√©rification statut Pro:', error)
      return false
    } finally {
      isCheckingStatus.value = false
    }
  }
  
  /**
   * R√©initialiser les erreurs
   */
  const clearError = () => {
    upgradeError.value = null
  }
  
  return {
    // √âtats
    isUpgrading: computed(() => isUpgrading.value),
    isCheckingStatus: computed(() => isCheckingStatus.value),
    upgradeError: computed(() => upgradeError.value),
    
    // Computed
    isUserPro,
    canUpgrade,
    
    // Actions
    upgradeToPro,
    checkProStatus,
    clearError
  }
}

export default useSubscription
